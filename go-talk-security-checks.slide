# Essential security checks for your Go project

Cosmin Cojocar
Maintainer of gosec security analyzer
github.com/ccojocar
cosmin@cojocar.ch

https://github.com/ccojocar/go-talk-security-checks
_Images_ generated by firefly.adobe.com

##

.image images/gopher_intro.png _ 500

## Overview

Security checks:
- Code

- Dependencies

- Release

Q&A

##

.image images/gopher_bugs.png _ 500

## Code Security

.code secret.go

## Common Code Issues

- Neglected Input Validation
- Injections of all kinds
- Server Side Request Forgery
- Unsafe Crypto
- Path Traversal
- Hardcoded Secrets
- Denial of Service (DoS)
- Cross Site Scripting (XSS)
- TLS Configuration

The list goes on and on ...

##

.image images/duke_advice_gopher.png _ 500

## Where is the input coming from?

Let's see just a few input sources:
- Environment Variables
- Command Line Arguments
- Query Parameters
- URL Values
- HTTP Header Values
- Cookies
- Form Data
- Files

## Injections of all kinds

To list a few:
- SQL/NoSQL Injection
- Command Injection
- Reflected/Stored/DOM XSS
- Open Redirects

## Security Review

.image images/gopher_review.jpg _ 500

## Manual Code Review

- Manual code review is a good start
- Security engineers should be involved in the development
- It's not enough
- It's not scalable
- Difficult to keep up with the development speed
- Human error

## Automated Security Checks

- **Must** include static code analysis in your build
- Fix the findings before merging the code
- Low false positive rates matter
- Not bullet proof, false negatives are still there
- Code scanning speed is important, Fast Feedback
- Good reporting capabilities (e.g. SARIF output)
- Integration support (e.g. Container Image, GitHub Action)

## Welcome to gosec security analyzer

.link https//github.com/securego/gosec

.image images/gosec.png _ 400

## gosec

- Static code analyzer for Go
- Inspects the Go AST and SSA code representations
- Ships with a set of rules implemented in Go
- Very fast and easy to integrate
- GitHub Action and container image available
- Integrated in golangci-lint tool, Gitlab etc.
- SARIF output support, and many others
- **Happy to accept new contributions or sponsorships**

## Let's see it in action

.code ssrf.go  /START OMIT/,/END OMIT/

## Let's see it in action

.code ssrf_hl.go  /START OMIT/,/END OMIT/

## $ gosec ./... output

.code ssrf_scan_output.txt

## Rules

- 36 rules built-in:

.link https://github.com/securego/gosec#available-rules

- CWE (Common Weakness Enumeration) mapping
- Custom rules written in Go can be added
- Runs concurrently
- Rules inspect either the AST or SSA code representation
- AST rules are faster, suited for contained security issues
- SSA works better for data flow analysis (e.g. taint analysis)

## AST based Rule

.code ast_rule.go

## AST (Abstract Syntax Tree)

.code ast.txt

## SSA based Rule

.code ssa_rule.go /START OMIT/,/END OMIT/


## SSA (Static Single Assignment)

.code ssa.txt

## How to add it to your GitHub Workflow

.code github_action.yaml

## Code Fuzzing

.image images/gopher_fuzz.png _ 600

## Go Fuzzing

- Random data as input to find vulnerabilities or crashes
- Recommended for complex code (e.g. parsers)
- Example of vulnerabilities found: SQLi, Buffer Overflow, DoS, XSS
- Go has a built-in fuzzing framework
- Initial corpus + generated corpus (testdata/fuzz/FuzzFoo)

Resources:

.link https://go.dev/doc/tutorial/fuzz

.link https://go.dev/security/fuzz/

## Go Fuzzing

.image images/go_fuzzing.png _ 700

## Secure your dependencies 

.image images/gopher_dependencies.jpg _ 400

## Good Practices

- Many dependencies from a variety of sources
- Review them constantly prior to use 
- Check their checksum: [gosumcheck](https://pkg.go.dev/golang.org/x/mod/gosumcheck)
- Keep dependencies up to date using a bot: e.g. Renovate, Dependabot
- Keep your Go version up to date, security fixes are released frequently
- Scan your dependencies continuously for known vulnerabilities: [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck)

## govulncheck

- Analyzes your code to discover active dependencies
- Checks the binary's symbol table
- Connects to a vulnerability database ([https://vuln.go.dev](https://vuln.go.dev))
- You can block the build when new vulnerabilities are discovered 
- It has some limitations

**How to use it:**

.code govulncheck.txt

## govulncheck output (1)

.code govulncheck_output.txt

## govulncheck output (2)

.code govulncheck_output_information.txt

## Release Security

.image images/gopher_lock.jpg _ 400

## Sign your artifacts

- Sign your binaries and container images
- Generate a BOM (Bill of Materials) for your application
- Tools like cosign/sigstore make this easy
- Self-Managed Keys (KMS) or Keyless (OpenID Connect)

**Generate a key pair**:

.code cosign.txt

.image images/cosign.svg _ 300

## goreleaser

.code goreleaser.yaml

## Sign you container image

.code release_sign.yaml
